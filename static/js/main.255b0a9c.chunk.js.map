{"version":3,"sources":["components/Cell.js","components/Grid.js","components/Menu.js","index.js"],"names":["Cell","className","this","props","cellClass","onClick","handleClickCell","row","col","React","Component","Grid","populateGrid","i","map","cols","j","gridMatrix","id","key","style","width","Menu","classes","Tooltip","title","Fab","square","play","pause","step","random","reset","withStyles","borderRadius","marginRight","color","background","generate2DArray","rows","columns","Array","fill","Main","onCellSelected","column","oldGrid","state","slice","setState","randomSetup","updateGrid","Math","floor","iterations","false","clearInterval","interval","setInterval","iteration","true","isGridEmpty","clearGrid","grid","alive","newGrid","cell","neighbours","aliveCounter","input","undefined","every","item","cellsSize","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.255b0a9c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Cell extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName={this.props.cellClass}\r\n\t\t\t\tonClick={() => this.props.handleClickCell(this.props.row, this.props.col)}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Cell;","import React from \"react\";\r\nimport Cell from \"./Cell\"; \r\n\r\nclass Grid extends React.Component {\r\n  populateGrid = (row, i) => {\r\n    var cellClass = \"\";\r\n    return (\r\n      row.map((cols, j) => {\r\n      cellClass = this.props.gridMatrix[i][j] ? \"cell live\" : \"cell dead\";\r\n      let id = i + \",\" + j;\r\n       return <Cell\r\n        cellClass={cellClass}\r\n        key={id}\r\n        row={i}\r\n        col={j}\r\n        handleClickCell={this.props.handleClickCell}\r\n      />;\r\n    })\r\n    )\r\n  }\r\n\r\n  render() {\r\n      return (\r\n      <div className=\"grid\" style={{width: this.props.width}}>\r\n      {this.props.gridMatrix.map(this.populateGrid)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Grid;","import React from \"react\"; \r\nimport Fab from '@material-ui/core/Fab';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n  square: {\r\n\t\tborderRadius: '0px',\r\n\t\tmarginRight: '15px',\r\n\t\tcolor: '#ba2d65',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: \"#ba2d65\",\r\n\t\t\tcolor: '#fafafa'\r\n    }\r\n  }\r\n};\r\n\r\n\r\nclass Menu extends React.Component {\r\n\trender() {\r\n\t\tconst { classes } = this.props\r\n\t\treturn (\r\n\t\t\t<div className=\"buttons\">\r\n\t\t\t\t<Tooltip title=\"Play\">\r\n\t\t\t\t\t<Fab className={classes.square} onClick={this.props.play}>\r\n\t\t\t\t\t\t<PlayArrowIcon /> \r\n\t\t\t\t\t</Fab>\r\n      \t</Tooltip>\r\n\t\t\t\t<Tooltip title=\"Pause\">\r\n\t\t\t\t\t<Fab className={classes.square} onClick={this.props.pause}>\r\n\t\t\t\t\t\t<PauseIcon />\r\n\t\t\t\t\t</Fab>\r\n      \t</Tooltip>\r\n\t\t\t\t<Tooltip title=\"Step\">\r\n\t\t\t\t\t<Fab className={classes.square} onClick={this.props.step}>\r\n\t\t\t\t\t\t<SkipNextIcon />\r\n\t\t\t\t\t</Fab>\r\n      \t</Tooltip>\r\n\t\t\t\t<Tooltip title=\"Random start\">\r\n\t\t\t\t\t<Fab className={classes.square} onClick={this.props.random}>\r\n\t\t\t\t\t\t<ShuffleIcon />\r\n\t\t\t\t\t</Fab>\r\n      \t</Tooltip>\r\n\t\t\t\t<Tooltip title=\"Clean\">\r\n\t\t\t\t\t<Fab className={classes.square} onClick={this.props.reset}>\r\n\t\t\t\t\t\t<CloseIcon />\r\n\t\t\t\t\t</Fab>\r\n      \t</Tooltip>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\nexport default withStyles(styles)(Menu);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Grid from \"./components/Grid\"; \nimport Menu from \"./components/Menu\"; \nimport \"./index.css\";\n\nfunction generate2DArray(rows, columns) {\n  return Array(rows).fill().map(() => Array(columns).fill(false))\n};  \n\nclass Main extends React.Component {\n  constructor(){\n    super();\n    this.rows = 20;\n    this.cols = 50;\n    this.cellsSize = 20;\n    this.state = {\n      gridMatrix: generate2DArray(this.rows, this.cols),\n      iterations: 0\n    }\n  }\n\n  onCellSelected = (row, column) => {\n    let oldGrid = this.state.gridMatrix.map(row => row.slice());\n    oldGrid[row][column] = !oldGrid[row][column];\n    this.setState({\n      gridMatrix: oldGrid\n    })\n  }\n\n  randomSetup = () => {\n    let oldGrid = this.state.gridMatrix.map(row => row.slice());\n    let updateGrid = oldGrid.map((row) => {\n      return row.map(() => {\n        return (Math.floor(Math.random() * 101) % 5 === 0);\n      })\n    })\n    this.setState({\n      gridMatrix: updateGrid,\n      iterations: 0\n    })\n  }\n\n  play = () => {\n    const playIfEmpty = {\n      false: () => {\n          clearInterval(this.interval);\n          this.interval = setInterval(this.iteration, 200);\n      },\n      true: () => {}\n    }\n    playIfEmpty[this.isGridEmpty(this.state.gridMatrix)]()\n  }\n\n  pause = () => {\n    clearInterval(this.interval);\n  }\n\n  reset = () =>  {\n    clearInterval(this.interval);\n    let clearGrid = generate2DArray(this.rows, this.cols);\n    this.setState({\n\t\t\tgridMatrix: clearGrid,\n      iterations: 0\n\t\t});\n  }\n\n  iteration = () => {\n    let grid = this.state.gridMatrix;\n    const alive = (row, column) => grid[row] && grid[row][column];\n    let newGrid =  grid.map((row, i) => {\n      return row.map((cell, j) => {\n        let neighbours = 0;\n        neighbours += this.aliveCounter(alive(i - 1, j - 1));\n        neighbours += this.aliveCounter(alive(i - 1, j));\n        neighbours += this.aliveCounter(alive(i - 1, j + 1));\n        neighbours += this.aliveCounter(alive(i, j - 1));\n        neighbours += this.aliveCounter(alive(i, j + 1));\n        neighbours += this.aliveCounter(alive(i + 1, j - 1));\n        neighbours += this.aliveCounter(alive(i + 1, j));\n        neighbours += this.aliveCounter(alive(i + 1, j + 1));\n        return neighbours === 3  || (neighbours === 2 && alive(i, j));\n      })\n    })\n    this.setState({\n      gridMatrix: newGrid,\n      iterations: this.state.iterations + 1 \n    })\n  }\n\n  aliveCounter = (input) => {\n    const count = {\n      true: 1,\n      false: 0,\n      undefined: 0,\n    };\n    return count[input];\n  };\n\n  isGridEmpty = (grid) => {\n    return grid.every((row) => row.every(item => item === false) === true);\n  }\n\n  componentDidMount () {\n    this.randomSetup();\n  }\n\n  render() {\n    return (\n      <div>\n        <div className= \"title\">\n          <h1>Conway's Game of life</h1>\n          <h2>Diana Gutiérrez</h2>\n        </div> \n        <div className=\"container\">    \n          <div className=\"menu\">       \n            <Menu \n              play={this.play}\n              pause={this.pause}\n              step={this.iteration}\n              random={this.randomSetup}\n              reset={this.reset}\n            />\n            <div>\n              <h3>{this.state.iterations}</h3>    \n            </div> \n          </div>\n          <Grid \n            width= {this.cols * this.cellsSize }\n            gridMatrix={this.state.gridMatrix}\n            rows={this.rows}\n            cols={this.cols}\n            handleClickCell={this.onCellSelected}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n"],"sourceRoot":""}